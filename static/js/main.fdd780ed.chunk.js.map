{"version":3,"sources":["components/Directory.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Directory","onClick","allEmployees","index","listedEmployees","map","employee","key","name","title","department","phone","email","className","Filter","FilterType","useRef","FilterValue","useState","currentEmployees","setCurrentEmployees","order","setOrder","onSubmit","event","preventDefault","type","current","value","filter","x","alert","ref","newEmployeeArr","sort","a","b","nameA","toUpperCase","nameB","App","Form","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fdd780ed.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Directory = ({onClick, allEmployees}) => {\n\n        let index = 0;\n        const listedEmployees = allEmployees.map((employee) => \n\n            <tr key={index++}>\n                <td>{employee.name}</td>\n                <td>{employee.title}</td>\n                <td>{employee.department}</td>\n                <td>{employee.phone}</td>\n                <td>{employee.email}</td>\n            </tr>\n\n        );\n  \n        return (\n            <table>\n                <tbody>\n                    <tr>\n                        <th>Name<span className=\"sort-by-name\" onClick={onClick}><i className=\"fas fa-angle-down\"></i></span></th>\n                        <th>Job Title</th>\n                        <th>Department</th>\n                        <th>Phone Number</th>\n                        <th>Email Address</th>\n                    </tr>\n\n                    {listedEmployees}\n\n                </tbody>\n            </table>\n        )\n\n}\n\nexport default Directory;","import React, {useRef, useState} from \"react\";\nimport Directory from \"./Directory\";\n\nconst Filter = () => {\n\n    const allEmployees = [\n        {\n          name: \"Jake Gyllenhal\",\n          title: \"Software Engineer\",\n          phone: \"952-452-2390\",\n          email: \"jake@designzillas.com\",\n          department: \"IT\"\n        },\n        {\n          name: \"Edward Cullen\",\n          title: \"HR Manager\",\n          phone: \"349-433-2320\",\n          email: \"edward@designzillas.com\",\n          department: \"Human Resources\"\n        },\n        {\n          name: \"Bella Thorne\",\n          title: \"HR Representative\",\n          phone: \"934-390-8492\",\n          email: \"bella@designzillas.com\",\n          department: \"Human Resources\"\n        },\n        {\n          name: \"Allison Hargreeves\",\n          title: \"Test Engineer\",\n          phone: \"954-204-9140\",\n          email: \"allison@designzillas.com\",\n          department: \"Development\"\n        },\n        {\n          name: \"Harry Potter\",\n          title:\"Back-End Developer\",\n          phone: \"939-290-4782\",\n          email: \"harry@designzillas.com\",\n          department: \"Development\"\n        },\n        {\n          name: \"Hermione Granger\",\n          title: \"Back-End Developer\",\n          phone: \"934-452-2591\",\n          email: \"hermione@designzillas.com\",\n          department: \"Development\"\n        },\n        {\n          name: \"Hayley Williams\",\n          title: \"Office Puppy\",\n          phone: \"952-452-2390\",\n          email: \"supportpup@designzillas.com\",\n          department: \"Human Resources\"\n        },\n        {\n          name: \"Taylor Swift\",\n          title: \"Web Designer\",\n          phone: \"324-390-1049\",\n          email: \"taylor@designzillas.com\",\n          department: \"Design\"\n        },\n        {\n          name: \"Lisa Simpson\",\n          title: \"UX Designer\",\n          phone: \"342-134-5032\",\n          email: \"lisa@designzillas.com\",\n          department: \"Design\"\n        },\n        {\n          name: \"Thomas Black\",\n          title: \"Software Engineer\",\n          phone: \"324-547-2492\",\n          email: \"tom@designzillas.com\",\n          department: \"IT\"\n        }\n      ];\n\n    const FilterType = useRef();\n    const FilterValue = useRef();\n\n    const [currentEmployees, setCurrentEmployees] = useState(allEmployees);\n    const [order, setOrder] = useState(\"none\");\n\n\n    const handleSubmit = event => {\n\n        event.preventDefault();\n        const type = FilterType.current.value;\n        const value = FilterValue.current.value;\n\n        if(type === \"name\") {\n            setCurrentEmployees(allEmployees.filter(x => x.name === value));\n        } else if(type === \"email\") {\n            setCurrentEmployees(allEmployees.filter(x => x.email === value));\n        } else {\n            alert(\"Select a Filter Type\");\n        }\n\n        //console.log(`all employees - ${JSON.stringify(allEmployees)}`);\n\n    };\n\n    const sortByName = event => {\n        event.preventDefault();\n        //console.log(\"sorting\")\n\n        let newEmployeeArr = allEmployees;\n\n         if(order === \"sorted\"){\n\n            newEmployeeArr.sort(function(a, b) {\n                var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n                var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n                if (nameA < nameB) {\n                  return 1;\n                }\n                if (nameA > nameB) {\n                  return -1;\n                }\n              \n                // names must be equal\n                return 0;\n            });\n\n            setOrder(\"reverse-sort\");\n\n        } else {\n\n\n                newEmployeeArr.sort(function(a, b) {\n                    var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n                    var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n                    if (nameA < nameB) {\n                      return -1;\n                    }\n                    if (nameA > nameB) {\n                      return 1;\n                    }\n                  \n                    // names must be equal\n                    return 0;\n                });\n    \n                setOrder(\"sorted\");\n    \n        }\n\n        setCurrentEmployees([...newEmployeeArr]);\n         \n    }\n\n        return (\n            <form onSubmit={handleSubmit}>\n                <label>Filter By</label>\n                <select name=\"filter-type\" ref={FilterType}>\n                    <option value=\"name\">Name</option>\n                    <option value=\"email\">Email</option>\n                </select>\n                <input type=\"text\" name=\"filter-value\" ref={FilterValue}/>\n                <input type=\"submit\" value=\"Filter Employees\"/>\n\n                <Directory allEmployees={currentEmployees} onClick={sortByName}/>\n\n            </form>\n        )\n\n}\n\nexport default Filter;","import React from 'react';\nimport './App.css';\nimport Form from './components/Form';\n\nfunction App() {\n\n  return (\n    <div className=\"container\">\n        <h1>Employee Directory</h1>\n        <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}