{"version":3,"sources":["components/directory.js","App.js","serviceWorker.js","index.js"],"names":["Directory","onClick","listedEmployees","allEmployees","map","employee","name","title","department","phone","email","class","App","useReducer","state","action","dispatch","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQAoCeA,G,MAlCG,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,QAENC,EAFiC,EAAlBC,aAEgBC,KAAI,SAACC,GAAD,OAErC,4BACI,4BAAKA,EAASC,MACd,4BAAKD,EAASE,OACd,4BAAKF,EAASG,YACd,4BAAKH,EAASI,OACd,4BAAKJ,EAASK,WAKtB,OACI,+BACI,+BAEI,4BACI,mCAAQ,0BAAMC,MAAM,eAAeV,QAASA,GAAS,uBAAGU,MAAM,wBAC9D,yCACA,0CACA,4CACA,8CAGHT,MCqENU,MA7Ff,WAEE,IAFa,EA2EoBC,sBAAW,SAACC,EAAOC,GAElD,GAAc,eAAXA,EAED,OAAOD,IA7EO,CAChB,CACER,KAAM,iBACNC,MAAO,oBACPE,MAAO,eACPC,MAAO,wBACPF,WAAY,MAEd,CACEF,KAAM,gBACNC,MAAO,aACPE,MAAO,eACPC,MAAO,0BACPF,WAAY,mBAEd,CACEF,KAAM,eACNC,MAAO,oBACPE,MAAO,eACPC,MAAO,yBACPF,WAAY,mBAEd,CACEF,KAAM,qBACNC,MAAO,gBACPE,MAAO,eACPC,MAAO,2BACPF,WAAY,eAEd,CACEF,KAAM,eACNC,MAAM,qBACNE,MAAO,eACPC,MAAO,yBACPF,WAAY,eAEd,CACEF,KAAM,mBACNC,MAAO,qBACPE,MAAO,eACPC,MAAO,4BACPF,WAAY,eAEd,CACEF,KAAM,kBACNC,MAAO,eACPE,MAAO,eACPC,MAAO,8BACPF,WAAY,mBAEd,CACEF,KAAM,eACNC,MAAO,eACPE,MAAO,eACPC,MAAO,0BACPF,WAAY,UAEd,CACEF,KAAM,eACNC,MAAO,cACPE,MAAO,eACPC,MAAO,wBACPF,WAAY,UAEd,CACEF,KAAM,eACNC,MAAO,oBACPE,MAAO,eACPC,MAAO,uBACPF,WAAY,QAvEH,mBA2ENL,EA3EM,KA2EQa,EA3ER,KAqFb,OACE,yBAAKC,UAAU,aACX,kDACC,kBAAC,EAAD,CAAWd,aAAcA,EAAcF,QAAS,kBAAMe,EAAS,mBChFpDE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.432741bb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Directory = ({onClick, allEmployees}) => {\n\n        const listedEmployees = allEmployees.map((employee) => \n\n            <tr>\n                <td>{employee.name}</td>\n                <td>{employee.title}</td>\n                <td>{employee.department}</td>\n                <td>{employee.phone}</td>\n                <td>{employee.email}</td>\n            </tr>\n        \n        );\n  \n        return (\n            <table>\n                <tbody>\n\n                    <tr>\n                        <th>Name<span class=\"sort-by-name\" onClick={onClick}><i class=\"fas fa-angle-down\"></i></span></th>\n                        <th>Job Title</th>\n                        <th>Department</th>\n                        <th>Phone Number</th>\n                        <th>Email Address</th>\n                    </tr>\n\n                    {listedEmployees}\n\n                </tbody>\n            </table>\n        )\n\n}\n\nexport default Directory;","import React, {useReducer} from 'react';\nimport './App.css';\nimport Directory from './components/directory';\n\nfunction App() {\n\n  const employees = [\n    {\n      name: \"Jake Gyllenhal\",\n      title: \"Software Engineer\",\n      phone: \"952-452-2390\",\n      email: \"jake@designzillas.com\",\n      department: \"IT\"\n    },\n    {\n      name: \"Edward Cullen\",\n      title: \"HR Manager\",\n      phone: \"349-433-2320\",\n      email: \"edward@designzillas.com\",\n      department: \"Human Resources\"\n    },\n    {\n      name: \"Bella Thorne\",\n      title: \"HR Representative\",\n      phone: \"934-390-8492\",\n      email: \"bella@designzillas.com\",\n      department: \"Human Resources\"\n    },\n    {\n      name: \"Allison Hargreeves\",\n      title: \"Test Engineer\",\n      phone: \"954-204-9140\",\n      email: \"allison@designzillas.com\",\n      department: \"Development\"\n    },\n    {\n      name: \"Harry Potter\",\n      title:\"Back-End Developer\",\n      phone: \"939-290-4782\",\n      email: \"harry@designzillas.com\",\n      department: \"Development\"\n    },\n    {\n      name: \"Hermione Granger\",\n      title: \"Back-End Developer\",\n      phone: \"934-452-2591\",\n      email: \"hermione@designzillas.com\",\n      department: \"Development\"\n    },\n    {\n      name: \"Hayley Williams\",\n      title: \"Office Puppy\",\n      phone: \"952-452-2390\",\n      email: \"supportpup@designzillas.com\",\n      department: \"Human Resources\"\n    },\n    {\n      name: \"Taylor Swift\",\n      title: \"Web Designer\",\n      phone: \"324-390-1049\",\n      email: \"taylor@designzillas.com\",\n      department: \"Design\"\n    },\n    {\n      name: \"Lisa Simpson\",\n      title: \"UX Designer\",\n      phone: \"342-134-5032\",\n      email: \"lisa@designzillas.com\",\n      department: \"Design\"\n    },\n    {\n      name: \"Thomas Black\",\n      title: \"Software Engineer\",\n      phone: \"324-547-2492\",\n      email: \"tom@designzillas.com\",\n      department: \"IT\"\n    }\n  ]\n\n  const [allEmployees, dispatch] = useReducer((state, action) => {\n\n    if(action === \"sortByName\") {\n\n      return state;\n\n    }\n\n  }, employees);\n\n  return (\n    <div className=\"container\">\n        <h1>Employee Directory</h1>\n         <Directory allEmployees={allEmployees} onClick={() => dispatch(\"sortByName\")}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}